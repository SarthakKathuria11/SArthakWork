#include<GL/glut.h>
#include<stdio.h>

float x1,x2,y1,y2,n;
static int count = 0;
static int no = 0;

void koch1(float x1,float y1,float x2,float y2,float n)
{

float x3=(2*x1+x2)/3;
float y3=(2*y1+y2)/3;
float x4=(x1+2*x2)/3;
float y4=(y1+2*y2)/3;
float x=x3+(x4-x3)*0.5+(y4-y3)*0.8660;
float y=y3-(x4-x3)*0.8660+(y4-y3)*0.5;
if(n>0)
{
koch1(x1,y1,x3,y3,n-1);
koch1(x3,y3,x,y,n-1);
koch1(x,y,x4,y4,n-1);
koch1(x4,y4,x2,y2,n-1);
}
else
{
glBegin(GL_LINE_STRIP);
if(count%2==0)
{
    glClearColor(1.0,1.0,1.0,0.0);
    //glColor3f(0.0,1.0,0.0);
    glVertex2f(x1,y1);
    //glColor3f(0.0,1.0,1.0);
    glVertex2f(x3,y3);
    //glColor3f(1.0,1.0,0.0);
    glVertex2f(x,y);
    //glColor3f(1.0,0.0,1.0);
    glVertex2f(x4,y4);
    //glColor3f(1.0,1.0,1.0);
    glVertex2f(x2,y2);
    glEnd();
}
else
{
    glClearColor(1.0,1.0,1.0,0.0);
    //glColor3f(0.0,1.0,0.0);
    glVertex2f(x1,y1);
    //glColor3f(0.0,1.0,1.0);
    glVertex2f(x3,y3);
    //glColor3f(0.0,1.0,0.0);
    glVertex2f(x,y);
    //glColor3f(1.0,0.0,1.0);
    glVertex2f(x4,y4);
    //glColor3f(1.0,0.0,1.0);
    glVertex2f(x2,y2);
    glEnd();
}

}
}
/*void koch2(float x1,float y1,float x2,float y2,float n)
{

float x3=(2*x1+x2)/3;
float y3=(2*y1+y2)/3;
float x4=(x1+2*x2)/3;
float y4=(y1+2*y2)/3;
float x=x3+(x4-x3)*0.5+(y4-y3)*0.8660;
float y=y3-(x4-x3)*0.8660+(y4-y3)*0.5;
if(n>0)
{
koch1(x1,y1,x3,y3,n-1);
koch1(x3,y3,x,y,n-1);
koch1(x,y,x4,y4,n-1);
koch1(x4,y4,x2,y2,n-1);
}
else
{
glBegin(GL_LINE_STRIP);
if(count%2==0)
{
    glClearColor(1.0,1.0,1.0,0.0);
    glColor3f(0.0,0.0,1.0);
    glVertex2f(x1,y1);
    //glColor3f(0.0,1.0,1.0);
    glVertex2f(x3,y3);
    //glColor3f(1.0,1.0,0.0);
    glVertex2f(x,y);
    glColor3f(1.0,0.0,1.0);
    glVertex2f(x4,y4);
    //glColor3f(1.0,1.0,1.0);
    glVertex2f(x2,y2);
    glEnd();
}
else
{
    glClearColor(1.0,1.0,1.0,0.0);
    glColor3f(0.0,0.0,1.0);
    glVertex2f(x1,y1);
    //glColor3f(0.0,1.0,1.0);
    glVertex2f(x3,y3);
    //glColor3f(0.0,1.0,0.0);
    glVertex2f(x,y);
    glColor3f(1.0,0.0,1.0);
    glVertex2f(x4,y4);
    //glColor3f(1.0,0.0,1.0);
    glVertex2f(x2,y2);
    glEnd();
}

}
}
void koch3(float x1,float y1,float x2,float y2,float n)
{

float x3=(2*x1+x2)/3;
float y3=(2*y1+y2)/3;
float x4=(x1+2*x2)/3;
float y4=(y1+2*y2)/3;
float x=x3+(x4-x3)*0.5+(y4-y3)*0.8660;
float y=y3-(x4-x3)*0.8660+(y4-y3)*0.5;
if(n>0)
{
koch1(x1,y1,x3,y3,n-1);
koch1(x3,y3,x,y,n-1);
koch1(x,y,x4,y4,n-1);
koch1(x4,y4,x2,y2,n-1);
}
else
{
glBegin(GL_LINE_STRIP);
if(count%2==0)
{
    glClearColor(1.0,1.0,1.0,0.0);
    glColor3f(1.0,0.0,0.0);
    glVertex2f(x1,y1);
    //glColor3f(0.0,1.0,1.0);
    glVertex2f(x3,y3);
    //glColor3f(1.0,1.0,0.0);
    glVertex2f(x,y);
    glColor3f(1.0,1.0,0.0);
    glVertex2f(x4,y4);
    //glColor3f(1.0,1.0,1.0);
    glVertex2f(x2,y2);
    glEnd();
}
else
{
    glClearColor(1.0,1.0,1.0,0.0);
    glColor3f(1.0,0.0,0.0);
    glVertex2f(x1,y1);
    //glColor3f(0.0,1.0,1.0);
    glVertex2f(x3,y3);
    //glColor3f(0.0,1.0,0.0);
    glVertex2f(x,y);
    glColor3f(1.0,1.0,0.0);
    glVertex2f(x4,y4);
    //glColor3f(1.0,0.0,1.0);
    glVertex2f(x2,y2);
    glEnd();
}

}
}*/
void Init()
{
glClearColor(0.0,0.0,0.0,0.0);
glColor3f(0.0,0.0,0.0);
gluOrtho2D(0.0,640.0,480.0,0.0);
}
void display()
{
glClear(GL_COLOR_BUFFER_BIT);
glColor3f(1.0,0.5,0.0);
koch1(300,50,400,200,no);
glColor3f(2.0,0.5,1.0);
koch1(200,200,300,50,no);
glColor3f(1.0,0.0,0.0);
koch1(400,200,200,200,no);
no++;

glFlush();
}
void myMouseFunc(int button, int state,int x,int y)
{
	if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
           count++;
           display();
	}
	else
    {
        if(button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
        {
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	// Clean the screen and the depth buffer
            glLoadIdentity();
        }
    }

}
int main(int argv,char **argc)
{


glutInit(&argv,argc);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowPosition(100,100);
glutInitWindowSize(640,480);
glutCreateWindow("KOCH");
Init();
glutDisplayFunc(display);
glutMouseFunc(myMouseFunc);
glutMainLoop();

return 0;
}
