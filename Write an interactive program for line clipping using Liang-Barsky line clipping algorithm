#include<GL/gl.h>
#include<stdio.h>
#include<GL/freeglut.h>
float p[4], q[4], t1,t2;
int lb=0,rb=0;
int xmin=100,xmax=700,ymin=100,ymax=700;
int x1,y1,x2,y2;
void init()    {
        glClearColor(1.0,1.0,1.0,1);
        glClear(GL_COLOR_BUFFER_BIT);
        gluOrtho2D(0,1368,0,720); }
void draw(int xx1,int yy1,int xx2,int yy2)  {
        glColor3f(0,0,0);
        glBegin(GL_LINES);
        glVertex2i(xx1,yy1);
        glVertex2i(xx2,yy2);
        glEnd();
        glFlush();    }
void liang(int xi, int yi, int xf, int yf)  {
    int tx1,tx2,ty1,ty2,i;
    lb=0; rb=0;
    int dx=xf-xi;
    int dy=yf-yi;
    float temp=0.0;
    p[0]=-dx;
    p[1]=dx;
    p[2]=-dy;
    p[3]=dy;
    q[0]=xi-xmin;
    q[1]=xmax-xi;
    q[2]=yi-ymin;
    q[3]=ymax-yi;
    for( i=0;i<4;i++) {
        if(p[i]==0)  {
            printf("line parallel to boundary\n");
            if(q[i]>=0){
                    if(i<2)  {
                        if(yi<ymin)
                            yi=ymin;
                        if(yf>ymax)
                            yf=ymax;
                       if(yf<ymin)
                            yf=ymin;
                     if(yf>ymax)
                             yf=ymax;                    }
                    if(i>1)  {
                        if(xi<xmin)
                            xi=xmin;
                         if(xf>xmax)
                            xf=xmax;
                        if(xf<xmin)
                            xf=xmin;
                        if(xf>xmax)
                            xf=xmax;
}
                draw(xi,yi,xf,yf);  } } }
    t1=0;t2=1;
    for(i=0;i<4;i++)  {
    temp=q[i]/p[i]; 
     if(p[i]<0)  {
         if(t1<=temp) 
            t1=temp;      }
        else{if(t2>temp)
            t2=temp;             } }
    printf("t1 is:  %f\n",t1); 
        printf("t2 is:  %f\n\n",t2);
    if(t1<t2)
   {
        tx1=xi+t1*p[1];
        tx2=xi+t2*p[1];
        ty1=yi+t1*p[3];
        ty2=yi+t2*p[3];
        draw(tx1,ty1,tx2,ty2);  } }
void display() {
    glColor3f(0.0, 0.0, 0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2i(xmin,ymin);
    glVertex2i(xmax,ymin);
    glVertex2i(xmax,ymax);
    glVertex2i(xmin,ymax);
    glEnd();
    glFlush(); }
void mouse(int button,int state,int x,int y)  {
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)  {
        x1=x;
        y1=720-y;
       lb++;}
    if(button == GLUT_LEFT_BUTTON && state == GLUT_UP)  {
        x2=x;
        y2=720-y;
      rb++; }
if(lb!=0 && rb!=0)
liang(x1,y1,x2,y2);  }  
int main(int argc, char** argv)  {
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(1368,720);
    glutInitWindowPosition(0,0);
    glutCreateWindow("Liang Barskey Clipping Algorithm");
    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutMainLoop();
   return 0;
   }

